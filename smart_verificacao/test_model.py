# test_model.py

"""
Este script realiza testes com o subm√≥dulo de verifica√ß√£o autom√°tica usando Gemini.
- Em modo DEBUG: simula respostas sem chamada real √† IA.
- Em modo REAL: envia prompt completo para a IA e imprime resposta.

Necess√°rio:
- Arquivo .env com a vari√°vel GEMINI_API_KEY
- PDF de teste em smart_documentos/temp/certificado.pdf
"""

import os
from dotenv import load_dotenv
import google.generativeai as genai
from verificador import verificar_documento

# Carrega vari√°veis do .env
load_dotenv()
api_key = os.getenv("GEMINI_API_KEY")
modo_debug = os.getenv("MODO_DEBUG_VERIFICACAO", "false").lower() == "true"

if not modo_debug and not api_key:
    print("‚ùå A chave GEMINI_API_KEY n√£o foi encontrada no .env")
    exit()

if not modo_debug:
    # Configura Gemini somente se n√£o estiver em modo debug
    genai.configure(api_key=api_key)

def teste_verificador():
    # Caminho do PDF corrigido (relativo √† pasta atual smart_verificacao/)
    caminho_pdf = "../smart_documentos/temp/certificado.pdf"
    
    # Lista de verifica√ß√£o espec√≠fica para o certificado
    lista_verificacao = """Nome da empresa certificada
N√∫mero do certificado
Data de emiss√£o
Data de validade
Respons√°vel t√©cnico
√ìrg√£o certificador"""

    print("üöÄ Iniciando verifica√ß√£o do documento...")
    resultado = verificar_documento(caminho_pdf, lista_verificacao)

    print("\n‚úÖ Resultado da verifica√ß√£o:\n")
    print(resultado["resposta"] if "resposta" in resultado else resultado)

if __name__ == "__main__":
    teste_verificador()
